---
upgrade_circuits:
  - |
     The :class:`.PhaseOracle` no longer relies on the ``tweedledum`` library, 
     as the dependency was not actively maintained. This change may affect 
     synthesis effectiveness.

     Additionally, the interface of :class:`.PhaseOracle` has been simplified: 
     it no longer accepts a synthesizer parameter, and the expression parameter 
     can only be a string. This is because the previously accepted ``ClassicalElement``
     type, deprecated in Qiskit 1.4, has been removed in Qiskit 2.0.

     Despite these upgrades, the standard usage of :class:`.PhaseOracle` remains unchanged:
    
     .. code-block:: python
      
      from qiskit.circuit.library.phase_oracle import PhaseOracle
      bool_expr = "(x0 & x1 | ~x2) & x4"
      oracle = PhaseOracle(bool_expr)
      print(oracle)
    
     .. code-block:: text

      q_0: ─o──■──■─
            │  │  │ 
      q_1: ─┼──o──■─
            │  │  │ 
      q_2: ─o──o──┼─
            │  │  │ 
      q_3: ─■──■──■─
                      
features_circuits:
  - |
     Added two new classes: :class:`.BitFlipOracleGate` and :class:`.PhaseOracleGate`.

     :class:`.BitFlipOracleGate` was introduced as an alternative to directly 
     synthesizing :class:`.BooleanExpression`, which has been removed in Qiskit 2.0. 
     :class:`.PhaseOracleGate` was added as an alternative to :class:`.PhaseOracle`, as the 
     latter will be deprecated throughout the 2.x series. Both classes share the interface 
     of :class:`.PhaseOracle`, except for the ``evaluate_bitstring`` method, which is no longer
     present.

     :class:`.BitFlipOracleGate` synthesizes a bit-flip oracle instead of a phase-flip 
     oracle, meaning it acts on one additional qubit and can be viewed as applying a 
     controlled-X operation, where the control is determined by the value of the 
     expression encoded by the oracle.

     .. code-block:: python
    
      from qiskit import QuantumCircuit
      from qiskit.circuit.library.bit_flip_oracle import BitFlipOracleGate
      from qiskit.circuit.library.phase_oracle import PhaseOracleGate
      qc = QuantumCircuit(5)
      bool_expr = "(x0 & x1 | ~x2) & x4"
      oracle = BitFlipOracleGate(bool_expr)
      qc.compose(oracle, inplace=True)
      print(qc)

     .. code-block:: text

           ┌─────────────────────┐
      q_0: ┤0                    ├
           │                     │
      q_1: ┤1                    ├
           │                     │
      q_2: ┤2 (x0 & x1 | ~x2)... ├
           │                     │
      q_3: ┤3                    ├
           │                     │
      q_4: ┤4                    ├
           └─────────────────────┘

     .. code-block:: python

      print(qc.decompose())

     .. code-block:: text

      q_0: ──o────■────■──
             │    │    │  
      q_1: ──┼────o────■──
             │    │    │  
      q_2: ──o────o────┼──
             │    │    │  
      q_3: ──■────■────■──
           ┌─┴─┐┌─┴─┐┌─┴─┐
      q_4: ┤ X ├┤ X ├┤ X ├
           └───┘└───┘└───┘

     .. code-block:: python

      qc = QuantumCircuit(5)
      bool_expr = "(x0 & x1 | ~x2) & x4"
      oracle = PhaseOracleGate(bool_expr)
      qc.compose(oracle, inplace=True)
      print(qc)

     .. code-block:: text

           ┌───────────────┐
      q_0: ┤0              ├
           │               │
      q_1: ┤1              ├
           │  Phase oracle │
      q_2: ┤2              ├
           │               │
      q_3: ┤3              ├
           └───────────────┘
      q_4: ─────────────────

     .. code-block:: python

      print(qc.decompose())

     .. code-block:: text

      q_0: ─o──■──■─
            │  │  │ 
      q_1: ─┼──o──■─
            │  │  │ 
      q_2: ─o──o──┼─
            │  │  │ 
      q_3: ─■──■──■─

      q_4: ─────────